<?xml version="1.0" encoding="UTF-8"?>
<definitions id="definitions"
             xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             xmlns:activiti="http://activiti.org/bpmn"
             typeLanguage="http://www.w3.org/2001/XMLSchema"
             expressionLanguage="http://www.w3.org/1999/XPath"
             targetNamespace="activiti-report">

    <process id="compensateProcess">

        <startEvent id="start"/>

        <sequenceFlow sourceRef="start" targetRef="scope"/>

        <subProcess id="scope">

            <startEvent id="startInScope"/>

            <sequenceFlow sourceRef="startInScope" targetRef="bookHotel"/>

            <serviceTask id="bookHotel"
                         activiti:delegateExpression="${bookHotel}"
                         activiti:expression="${false}">
                <multiInstanceLoopCharacteristics isSequential="true">
                    <loopCardinality>5</loopCardinality>
                </multiInstanceLoopCharacteristics>
            </serviceTask>

            <boundaryEvent id="compensateBookHotelEvt" name="Boundary event" attachedToRef="bookHotel">
                <compensateEventDefinition/>
            </boundaryEvent>

            <serviceTask id="undoBookHotel" isForCompensation="true"
                         activiti:delegateExpression="${undoService}">
                <extensionElements>
                    <activiti:field name="counterName" stringValue="undoBookHotel"/>
                </extensionElements>
            </serviceTask>

            <sequenceFlow sourceRef="bookHotel" targetRef="endInScope"/>

            <endEvent id="endInScope"/>

            <association associationDirection="One" sourceRef="compensateBookHotelEvt" targetRef="undoBookHotel"/>

        </subProcess>

        <sequenceFlow sourceRef="scope" targetRef="throwCompensate"/>

        <intermediateThrowEvent id="throwCompensate">
            <compensateEventDefinition activityRef="scope"/>
        </intermediateThrowEvent>

        <sequenceFlow sourceRef="throwCompensate" targetRef="beforeEnd"/>
        <sequenceFlow sourceRef="beforeEnd" targetRef="end"/>

        <receiveTask id="beforeEnd"/>

        <endEvent id="end"/>
    </process>

</definitions>
